1.ArrayList
    (1)概述
        I:实现List接口的动态数组(大小可变),默认初始容量为10,随着ArrayList中元素的增加,容量也会不断自动增长。
        II:每次添加新的元素时,ArrayList会检查是否需要扩容,所以在知道场景数据的时候,构造时指定一个初始容量会减少资源消耗。
        III:ArrayList实现不是同步的,若多个线程同时访问一个ArrayList实例,要保持同步,在创建ArrayList时可以通过
            List list = Collections.synchronizedList(new ArrayList(...));来保持同步

    (2)ArrayList的继承关系
        public class ArrayList<E> extends AbstractList<E>
                implements List<E>, RandomAccess, Cloneable, java.io.Serializable
        ArrayList继承AbstractList抽象父类，实现了List接口（规定了List的操作规范）、RandomAccess（可随机访问）、Cloneable（可拷贝）、Serializable（可序列化）。

    (3)底层数据结构
        底层是一个object数组,由transient修饰 transient Object[] elementData;
        ArrayList底层数组不会参与序列化,而是使用另外的序列化方式.
        使用writeObject方式序列化:只复制数组中有值的位置,其他未赋值的位置不进行序列化,可以节省空间
            //        private void writeObject(java.io.ObjectOutputStream s)
            //        throws java.io.IOException{
            //            // Write out element count, and any hidden stuff
            //            int expectedModCount = modCount;
            //            s.defaultWriteObject();
            //
            //            // Write out size as capacity for behavioural compatibility with clone()
            //            s.writeInt(size);
            //
            //            // Write out all elements in the proper order.
            //            for (int i=0; i<size; i++) {
            //                s.writeObject(elementData[i]);
            //            }
            //
            //            if (modCount != expectedModCount) {
            //                throw new ConcurrentModificationException();
            //            }
            //        }

    (4)增删改查
        I:添加元素:判断索引是否合法,检测是否需要扩容,使用System.arraycopy方法来完成数组的复制
             从源数组src的srcPos位置开始,将数组元素复制到目标数组dest,从destPost开始,复制长度为length
             public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)

        II:删除元素:判断索引是否合法,将删除元素右边的元素左移,使用System.arraycopy进行拷贝
            System.arraycopy(elementData, index+1, elementData, index, numMoved);

        III:ArrayList提供了一个清空数组的方法,clear()让GC自动回收掉没有被引用的元素

        IV:修改元素,只需要检查下标后即可进行修改操作
                        public E set(int index, E element) {
                            rangeCheck(index);
                            E oldValue = elementData(index);
                            elementData[index] = element;
                            return oldValue;
                        }
                        public E get(int index) {
                            rangeCheck(index);
                            return elementData(index);
                        }

                         检查下标
                         private void rangeCheck(int index) {
                            if (index >= size) {
                                throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
                            }
                         }

        V:modCount:在一个迭代器初始的时候会赋予它调用这个迭代器对象的modCount,一旦发现该对象的modCount和迭代器中存储的modCount不一样就抛出异常
          这被叫做Fail-Fast机制,ArrayList不是线程安全的,所以使用modCount来判断:
                判断 modCount 跟 expectedModCount 是否相等，如果不相等就表示已经有其他线程修改了 ArrayList,不相等就抛出异常
          建议:遍历非安全的数据结构的时候,最好使用迭代器.


        VI:初始容量和扩容方式
            ArrayList初始容量为10
            扩容方法:每次扩容处理是1.5倍,因为一次性扩容太大浪费更多内存,扩容太小,需要多次对数组重新分配内存,所以1.5是比较好的扩容倍数;

        VII:线程安全
            ArrayList是线程不安全的,在迭代器中,如果多线程操作导致modCount改变,会执行fastFail,抛出异常
                    final void checkForComodification() {
                        if (modCount != expectedModCount) {
                            throw new ConcurrentModificationException();
                        }
                    }

2.Vector
    (1)概述:Vector可以实现可增长的对象数组,可以使用整数索引进行访问的组件.但是Vector大小是可以增加或者减少的