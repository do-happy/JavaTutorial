1.对于已知得场景,要指定集合的初始容量。(可以减少资源的消耗)

2.asList的缺陷(入参为泛型类型):
    (1)asList的参数为泛型的变长参数,若入参类型不为泛型,则会出错
    例如:int[] ins = {1,2,3,4,5};
         System.out.println(Arrays.asList(ins).size()) -> 1
         原因:因为ins类型为int,无法泛型化,不能作为asList的参数,
             但是int类型的数组可以泛型化,可以就相当于入参为一个数组,即结果为1

    (2)asList返回的列表只是披着list的外衣,但是没有list的基本特性(变长),所以在使用asList之后
       不要试图去改变asList返回的列表,否则会出现问题

3.subList(用于对List进行分割)的缺陷:
    subList()分割的其实是原表的一个视图,但是子列表的操作都会反应在原列表上。

4.保持compareTo和equals同步
    对于compareTo和equals两个方法我们可以总结为：compareTo是判断元素在排序中的位置是否相等，
    equals是判断元素是否相等，既然一个决定排序位置，一个决定相等，所以我们非常有必要确保当排序位置相同时，其equals也应该相等。